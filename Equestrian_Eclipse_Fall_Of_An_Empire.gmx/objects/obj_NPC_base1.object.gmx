<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_interactable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

var hasquest = false;
quest_started = false;
quest_assigned = false;
search_quest = "";
search_item = "";

my_target = instance_create(x,y,obj_pathguide);
my_path = -1;

phy_fixed_rotation = true;
npc_base_prepare = false;   //If E was pressed -&gt; check if released
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth

depth = y * -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction

var dist = point_distance(obj_player.phy_position_x, obj_player.phy_position_y,phy_position_x,phy_position_y);

if(dist &lt; 50)
{
    if(hasquest == true)
    {
        //Quest start confirmed
        if(global.quest_success == 1)
        {
        if(global.quest_target == quest_name &amp;&amp; global.quest_b == true)
        {
            //Text
            with(instance_create(200, 520, obj_window_base))
            {
                image_xscale = 12;
                image_yscale = 3;
                window_message1 = other.quest_start;
                window_speaker = other.sprite;
                
                event_user(0);
            }
            //Avatar
            with(instance_create(0, 520, obj_window_base))
            {
                image_xscale = 3;
                image_yscale = 3;
                window_speaker = other.sprite;
                
                event_user(0);
            }
            //show_message(quest_start)
            
            global.message1 = "Quest started: " + quest_name + ".";
            global.message2 = true;
            show_debug_message("Quest activated: " + quest_name + ".");
        
            quest_object1.active = true;
            obj_player.quest_assigned = false;
            global.quest_b = false;
        
            quest_started = true;
        }
        }
            
        //Quest start prohibited
        if(global.quest_success == 2)
        {
        if(global.quest_target == quest_name &amp;&amp; global.quest_b == true)
        {
            //Text
            with(instance_create(200, 520, obj_window_base))
            {
                image_xscale = 12;
                image_yscale = 3;
                window_message1 = "Sorry, you already have enough quests.#Come back when you have finished some.";
                window_speaker = other.sprite;
                
                event_user(0);
            }
            //Avatar
            with(instance_create(0, 520, obj_window_base))
            {
                image_xscale = 3;
                image_yscale = 3;
                window_speaker = other.sprite;
                
                event_user(0);
            }
            
            obj_player.quest_assigned = false;
            global.quest_b = false;
        }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///E press

if(keyboard_check(ord("E")))
{
    npc_base_prepare = true;
}

if(keyboard_check_released(ord("E")))
{
if(npc_base_prepare == true)
{
npc_base_prepare = false;
var dist = point_distance(obj_player.phy_position_x, obj_player.phy_position_y,phy_position_x,phy_position_y);

if(dist &lt; 50)
{
    if(hasquest == true)
    {
        if(quest_started == false)
        {   
            var i = 0;
            while(search_quest != quest_name &amp;&amp; i &lt; 1) //Runs = 5
            {
                search_quest = global.quests[i,0];
                i += 1;
                show_debug_message("Search quests run " + string(i) + ".");
            }
            
            delete = i -1;
            
            //Quest already assigned -&gt; check if completed
            if(search_quest == quest_name)
            {
                show_debug_message("Quest found in quest database.");
                
                i = 0;
                while(search_item != quest_item_name &amp;&amp; i &lt; 25) //Runs = 25
                {
                    search_item = global.items[i,0];
                    i += 1;
                    show_debug_message("Search inventory run " + string(i) + ".");
                }
                
                //Quest completed
                if(search_item == quest_item_name)
                {
                    //Text
                    with(instance_create(200, 520, obj_window_base))
                    {
                        image_xscale = 12;
                        image_yscale = 3;
                        window_message1 = other.quest_success;
                        window_speaker = other.sprite;
                        
                        event_user(0);
                    }
                    //Avatar
                    with(instance_create(0, 520, obj_window_base))
                    {
                        image_xscale = 3;
                        image_yscale = 3;
                        window_speaker = other.sprite;
                        
                        event_user(0);
                    }
                    //show_message(quest_success)
                    
                    show_debug_message("Quest completed: " + quest_name + ".");
                    
                    i -= 1;
                    show_message("Item slot [" + string(i) + "] selected for deletion.");
                    global.items[i,0] = "";
                    global.items[i,1] = "";
                    global.items[i,2] = "";
                    global.items[i,3] = "";
                    global.items[i,4] = spr_none;
                    show_debug_message("Erasing item out of inventory successful.");
                    
                    show_message("Quest slot [" + string(delete) + "] selected for deletion.");
                    global.quests[delete,0] = "";
                    global.message1 = "Quest completed: " + quest_name + ".";
                    global.message2 = true;
                      
                    hasquest = false;
                }
                //Quest uncompleted
                else
                {
                    //Text
                    with(instance_create(200, 520, obj_window_base))
                    {
                        image_xscale = 12;
                        image_yscale = 3;
                        window_message1 = other.quest_uncompleted;
                        window_speaker = other.sprite;
                        
                        event_user(0);
                    }
                    //Avatar
                    with(instance_create(0, 520, obj_window_base))
                    {
                        image_xscale = 3;
                        image_yscale = 3;
                        window_speaker = other.sprite;
                        
                        event_user(0);
                    }
                    //show_message(quest_uncompleted);
                }
            }
            //Quest will be assigned
            else
            {
                show_debug_message("Quest not found in quest database.");
                
                if(global.quest_b == false)
                {
                    global.quest1 = quest_name;
                    
                    with(obj_player)
                    { 
                        inv_quest = 1;
                        event_user(0);
                    }
                    
                    show_debug_message("Quest setup preparation.");
                }
            }
        }
        else
        {
            quest_started = false;
        }
    }
    else
    {
        //No Quest can be given
        //Text
        with(instance_create(200, 520, obj_window_base))
        {
            image_xscale = 12;
            image_yscale = 3;
            window_message1 = other.quest_none;
            window_speaker = other.sprite;
            
            event_user(0);
        }
        //Avatar
        with(instance_create(0, 520, obj_window_base))
        {
            image_xscale = 3;
            image_yscale = 3;
            window_speaker = other.sprite;
            
            event_user(0);
        }
    //show_message(quest_none);
    }
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow path if available

if(my_path != -1)
{
    dir = point_direction(my_target.x, my_target.y, phy_position_x, phy_position_y);
    dist = point_distance(my_target.x, my_target.y, phy_position_x, phy_position_y);
    
    dx = lengthdir_x(1, dir);
    dy = lengthdir_y(1, dir);
    
    phy_position_x -= dx;
    phy_position_y -= dy;
    
    if(dist &gt; 32)
    {
        phy_position_x = my_target.x;
        phy_position_y = my_target.y;
    }
    
    if(dir &lt; 225 &amp;&amp; dir &lt; 315)
    {
        sprite_index = spr_derpy_left;
    }
    else
    {
        if(dir &lt; 135 &amp;&amp; dir &lt; 225)
        {
            sprite_index = spr_derpy_right;
        }
        else
        {
            if(dir &lt; 45 &amp;&amp; dir &lt; 135)
            {
                sprite_index = spr_derpy_down;
            }
            else
            {
                sprite_index = spr_derpy_up;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_obstacles">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(my_target)
{
    path_start(other.my_path, 1, 1, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics Debug

physics_draw_debug();
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24.75,25.75</point>
    <point>18,25</point>
  </PhysicsShapePoints>
</object>
