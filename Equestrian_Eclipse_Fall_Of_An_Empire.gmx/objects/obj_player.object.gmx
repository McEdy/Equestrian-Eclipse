<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trixie_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

phy_fixed_rotation = true;
sprite_index = global.character_right;

//Variables
action = false;
attack_type = 1;
notme = true;
interaction_delay = false;
general_timer = true;

message_1a = "";    //Message 1 content
message_1b = false; //Message 1 start timer
message_1c = false; //Message 1 to be stopped
message_2a = "";
message_2b = false;
message_2c = false;
message_3a = "";
message_3b = false;
message_3c = false;

message_big_1a = "";
message_big_1b = "";
message_big_1c = "";

alpha1 = 1;
alpha2 = 1;
alpha3 = 1;

alpha_big1 = 1;

inv_display = 0;        //Slot number for display
inv_quest = 0;          //Choice if inventory or quest assignment (0 = inv, other = quest);
inv_show = false;
inv_assigned = false;
inv_slot_selected = false;
inv_preview_x = 0;
inv_preview_y = 0;
quest_show = false;
quest_show_prepare = false;

quest1 = "";
quest_assigned = false;
q_success = false;

//Status
max_hp = 10;
hp = max_hp;

max_stamina = 30;
stamina = max_stamina;

max_magic = 30;
magic = max_magic;

//Inventory
for(var i = 99; i &gt; -1; i--;)
{
    global.items[i,0] = "";
    global.items[i,1] = "";
    global.items[i,2] = "";
    global.items[i,3] = "";
    global.items[i,4] = spr_none;
}

show_debug_message("Inventory array finished.");

//Quests
for(var i = 5; i &gt; -1; i--;)
{
    global.quests[i,0] = "";
}

show_debug_message("Quest array finished.");

//Window messages
for(var i = 6; i &gt; -1; i--;)        //6 = amount of cases
{
    msg[i, 0] = 5;                  //Length of whole conversation
    msg[i, 1] = spr_inv_test;       //Sprite 1st message
    msg[i, 2] = "No message (1).";  //1st message
    msg[i, 3] = spr_inv_test;       //Sprite 2nd message
    msg[i, 4] = "No message (2).";  //2nd message
    msg[i, 5] = spr_inv_test;       //Sprite 3rd message
    msg[i, 6] = "No message (3).";  //3nd message
    msg[i, 7] = spr_inv_test;       //Sprite 4th message
    msg[i, 8] = "No message (4).";  //4th message
    msg[i, 9] = spr_inv_test;       //Sprite 5th message
    msg[i, 10] = "No message (5)."; //5th message
}

show_debug_message("Message array finished.");

//Sample messages
speaking = false;

//Handle text loop
text_loop = 0;
text_loop_limit = 5;
speech_active_counter = 0;

//Message array system variables
msg_pony = 0;
msg_conv = 0;
msg_case = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn

dest_x = 272;
dest_y = 112;
dest_room = rm_test;
respawn = false;

//Temporary

money = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General timer

general_timer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message big 1

alpha_big1 = 0.95;
message_big_1c = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message 3

alpha3 = 0.95;
message_3c = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message 2

alpha2 = 0.95;
message_2c = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message 1

alpha1 = 0.95;
message_1c = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth

depth = (phy_position_y - 15) * -1;
phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle input

if(keyboard_check(ord("A")))
{
    sprite_index = global.character_left;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0)
    {
        phy_position_x -= 3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_x -= 2;
    }
}

if(keyboard_check(ord("D")))
{
    sprite_index = global.character_right;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0)
    {
        phy_position_x += 3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_x += 2;
    }
}

if(keyboard_check(ord("W")))
{
    sprite_index = global.character_up;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0)
    {
        phy_position_y -= 3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_y -= 2;
    }
}

status_running = false;

if(keyboard_check(ord("S")))
{
    sprite_index = global.character_down;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0)
    {
        phy_position_y += 3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_y += 2;
    }
}

//Stamina regeneration
if(status_running == false)
{
if(stamina &lt; max_stamina)
{
    stamina += 1/60;
}
}

//Magic regeneration
if(magic &lt; max_magic)
{
    magic += 1/60;
}

//Inventory
if(keyboard_check_released(vk_tab))
{
if(inv_show_prepare == true)
{
if(quest_show == false)
{
    if(inv_show == false)
    {
        inv_show = true;
        inv_slot_selected = false;
        cursor_sprite = spr_cursor_normal;
    }
    else
    {
        inv_show = false;
        inv_slot_selected = false;
        cursor_sprite = spr_cursor_aiming;
    }
}
}
}

if(keyboard_check(vk_tab))
{
    inv_show_prepare = true;
}
else
{
    inv_show_prepare = false;
}

//Quest screen
if(keyboard_check_released(ord("Q")))
{
if(quest_show_prepare == true)
{
if(inv_show == false)
{
    if(quest_show == false)
    {
        quest_show = true;
    }
    else
    {
        quest_show = false;
    }
}
}
}

if(keyboard_check(ord("Q")))
{
    quest_show_prepare = true;
}
else
{
    quest_show_prepare = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display
//Display interactables

obj_closest = instance_nearest(x,y,obj_interactable);
dist_interact = point_distance(phy_position_x, phy_position_y, obj_closest.x, obj_closest.y);

if(obj_closest.active == true)
{
    if(dist_interact &lt; 50)
    {
        obj_bubble.active = true;
        obj_bubble.x = obj_closest.x;
        obj_bubble.y = obj_closest.y - 20;
    }
    else
    {
        obj_bubble.active = false;
    }
}
else
{
    obj_bubble.active = false;
}

//Information assignment
if(global.message2 == true)
{
    if(message_1a == "")
    {
        message_1a = global.message1;
        message_1b = true;
        show_debug_message("Message assignment 1.");
    }
    else
    {
        if(message_2a == "")
        {
            message_2a = global.message1;
            message_2b = true;
            show_debug_message("Message assignment 2.");
        }
        else
        {
            if(message_3a == "")
            {
                message_3a = global.message1;
                message_3b = true;
                show_debug_message("Message assignment 3.");
            }
            else
            {
                message_1a = global.message1;
                message_1b = true;
                show_debug_message("Message assignment O.");
            }
        }
    }
}

//Timer for information
if(message_1a != "")
{
if(message_1b == true)
{
    show_debug_message("Message: " + message_1a);
    alarm[0] = 120;
    message_1b = false;
    global.message2 = false;
}
}

if(message_2a != "")
{
if(message_2b == true)
{
    show_debug_message("Message: " + message_2a);
    alarm[1] = 120;
    message_2b = false;
    global.message2 = false;
}
}

if(message_3a != "")
{
if(message_3b == true)
{
    show_debug_message("Message: " + message_3a);
    alarm[2] = 120;
    message_3b = false;
    global.message2 = false;
}
}

//Fade out
if(alpha1 &lt; 1)
{
if(alpha1 &gt; 0)
{
    alpha1 -= 0.05;
}
}

if(alpha2 &lt; 1)
{
if(alpha2 &gt; 0)
{
    alpha2 -= 0.05;
}
}

if(alpha3 &lt; 1)
{
if(alpha3 &gt; 0)
{
    alpha3 -= 0.05;
}
}

//Stop information
if(alpha1 == 0)
{
if(message_1a != "")
{
if(message_1c == true)
{
    message_1a = "";
    message_1c = false;
    alpha1 = 1;
    show_debug_message("Finished message loop 1.");
}
}
}

if(alpha2 == 0)
{
if(message_2a != "")
{
if(message_2c == true)
{
    message_2a = "";
    message_2c = false;
    alpha2 = 1;
    show_debug_message("Finished message loop 2.");
}
}
}

if(alpha2 == 0)
{
if(message_3a != "")
{
if(message_3c == true)
{
    message_3a = "";
    message_3c = false;
    alpha3 = 1;
    show_debug_message("Finished message loop 3.");
}
}
}

//Damage popup
if(global.damage_popup1 == true)
{
    with(instance_create(x, y, obj_damage_popup))
    {
        character = other.id;
        //damage_amount = string(global.damage_popup);
        global.damage_popup1 = false;
    }
}

//Show big text top middle
//Information assignment
if(global.message_big2 == true)
{
    if(message_big_1a == "")
    {
        message_big_1a = global.message_big1;
        message_big_1b = true;
        show_debug_message("Message assignment (big) 1.");
    }
    else
    {
        message_big_1a = global.message_big1;
        message_big_1b = true;
        show_debug_message("Message assignment (big) O.");
    }
}

//Timer for information
if(message_big_1a != "")
{
if(message_big_1b == true)
{
    show_debug_message("Message: " + message_big_1a);
    alarm[3] = 120;
    message_big_1b = false;
    global.message_big2 = false;
}
}

//Fade out
if(alpha_big1 &lt; 1)
{
if(alpha_big1 &gt; 0)
{
    alpha_big1 -= 0.05;
}
}

//Stop message
if(alpha_big1 == 0)
{
if(message_big_1a != "")
{
if(message_big_1c == true)
{
    message_big_1a = "";
    message_big_1c = false;
    alpha_big1 = 1;
    show_debug_message("Finished message (big) loop 1.");
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Miscellaneous

//instance_deactivate_region(view_xview[0], view_yview[0], view_wview[0], view_hview[0], false, true);
//instance_activate_region(view_xview[1], view_yview[1], view_wview[1], view_hview[1], true);

//Deactivation of objects
instance_deactivate_region(0, 0, room_width, room_height, false, true);
instance_activate_region(view_xview[0] -150, view_yview[0] -150, view_wview[0] +150, view_hview[0] +150, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Z press test event

if(keyboard_check(ord("Z")))    //Prepare Z press action
{
    speech_active_counter = 1;
}

if(speech_active_counter = 1)
{
if(keyboard_check_released(ord("Z")))   //Launch action when Z is released
{
    speech_active_counter = 0;
    
    if(instance_exists(obj_window_base))    //If window was already created
    {
        if(obj_window_base.locked == false) //Only if window is not locked
        {
            with(obj_player)
            {
                text_loop += 1; //Next part of the conversation
                msg_pony = 1;   //NPC base gives player pony name
                msg_conv = 0;   //NPC base gives player conversation number
                event_user(1);  //Launch of conversation script
            }
        }
    }
    else                    //First creation of window
    {
        with(obj_player)
        {
            text_loop += 1; //Next part of the conversation
            msg_pony = 1;   //NPC base gives player pony name
            msg_conv = 0;   //NPC base gives player conversation number
            msg_case = 0;   //Error case
            event_user(1);  //Launch of conversation script
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_NPC_base1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide with
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_obstacles">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide with
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch Attack Type

if(attack_type == 1)
{
    attack_type = 2;
    global.message1 = "Fire: Range low, Damage high.";
    global.message2 = true;
}
else
{
    if(attack_type == 2)
    {
        attack_type = 3;
        global.message1 = "Ice: Range medium, Damage medium.";
        global.message2 = true;
    }
    else
    {
        if(attack_type == 3)
        {
            attack_type = 4;
            global.message1 = "Lightning: Range very high, Damage low.";
            global.message2 = true;
        }
        else
        {
            attack_type = 1;
            global.message1 = "Energy: Range very low, Damage very high.";
            global.message2 = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Magic

dir = point_direction(phy_position_x, phy_position_y, mouse_x, mouse_y);
spawn_x = lengthdir_x(25, dir);
spawn_y = lengthdir_y(25, dir);

if(inv_show == false &amp;&amp; quest_show == false)
{
if(global.character_race == "unicorn")
{
    switch(attack_type)
    {
        case 1:
        if(magic &gt;= 5)
        {
            attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_magic);
            magic -= 5;
            with(attack)
            {
                origin_x = phy_position_x;
                origin_y = phy_position_y;
            }
            break;
        }
        
        case 2:
        if(magic &gt;= 5)
        {
            attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_fire);
            magic -= 5;
            with(attack)
            {
                origin_x = phy_position_x;
                origin_y = phy_position_y;
            }
            break;
        }
        
        case 3:
        if(magic &gt;= 5)
        {
            attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_ice);
            magic -= 5;
            with(attack)
            {
                origin_x = phy_position_x;
                origin_y = phy_position_y;
            }
            break;
        }
        
        case 4:
        if(magic &gt;= 5)
        {
            attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_lightning);
            magic -= 5;
            with(attack)
            {
                origin_x = phy_position_x;
                origin_y = phy_position_y;
            }
            break;
        }
    }
    
    with(attack)
    {
        force_x = lengthdir_x(force, other.dir);
        force_y = lengthdir_y(force, other.dir);
        
        phy_rotation = -other.dir;
        physics_apply_impulse(x, y, force_x, force_y);
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory user input [OUTDATED]

/*
if(inv_show == true)
{
    //Column 1
    if(640 +70 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 640 +70+100)
    {
        //Slot 0
        if(150 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 250)
        {
            inv_display = 0;
            inv_slot_selected = true;
            inv_preview_x = 640 +70;
            inv_preview_y = 150;
        }
        //Slot 1
        if(250 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 350)
        {
            inv_display = 1;
            inv_slot_selected = true;
            inv_preview_x = 640 +70;
            inv_preview_y = 250;
        }
        //Slot 2
        if(350 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 450)
        {
            inv_display = 2;
            inv_slot_selected = true;
            inv_preview_x = 640 +70;
            inv_preview_y = 350;
        }
        //Slot 3
        if(450 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 550)
        {
            inv_display = 3;
            inv_slot_selected = true;
            inv_preview_x = 640 +70;
            inv_preview_y = 450;
        }
        //Slot 4
        if(550 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 650)
        {
            inv_display = 4;
            inv_slot_selected = true;
            inv_preview_x = 640 +70;
            inv_preview_y = 550;
        }
    }
    
    //Column 2
    if(740 +70 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 640 +70+200)
    {
        //Slot 5
        if(150 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 250)
        {
            inv_display = 5;
            inv_slot_selected = true;
            inv_preview_x = 740 +70;
            inv_preview_y = 150;
        }
        //Slot 6
        if(250 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 350)
        {
            inv_display = 6;
            inv_slot_selected = true;
            inv_preview_x = 740 +70;
            inv_preview_y = 250;
        }
        //Slot 7
        if(350 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 450)
        {
            inv_display = 7;
            inv_slot_selected = true;
            inv_preview_x = 740 +70;
            inv_preview_y = 350;
        }
        //Slot 8
        if(450 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 550)
        {
            inv_display = 8;
            inv_slot_selected = true;
            inv_preview_x = 740 +70;
            inv_preview_y = 450;
        }
        //Slot 9
        if(550 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 650)
        {
            inv_display = 9;
            inv_slot_selected = true;
            inv_preview_x = 740 +70;
            inv_preview_y = 550;
        }
    }
    
    //Column 3
    if(840 +70 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 640 +70+300)
    {
        //Slot 10
        if(150 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 250)
        {
            inv_display = 10;
            inv_slot_selected = true;
            inv_preview_x = 840 +70;
            inv_preview_y = 150;
        }
        //Slot 11
        if(250 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 350)
        {
            inv_display = 11;
            inv_slot_selected = true;
            inv_preview_x = 840 +70;
            inv_preview_y = 250;
        }
        //Slot 12
        if(350 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 450)
        {
            inv_display = 12;
            inv_slot_selected = true;
            inv_preview_x = 840 +70;
            inv_preview_y = 350;
        }
        //Slot 13
        if(450 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 550)
        {
            inv_display = 13;
            inv_slot_selected = true;
            inv_preview_x = 840 +70;
            inv_preview_y = 450;
        }
        //Slot 14
        if(550 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 650)
        {
            inv_display = 14;
            inv_slot_selected = true;
            inv_preview_x = 840 +70;
            inv_preview_y = 550;
        }
    }
    
    //Column 4
    if(940 +70 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 640 +70+400)
    {
        //Slot 15
        if(150 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 250)
        {
            inv_display = 15;
            inv_slot_selected = true;
            inv_preview_x = 940 +70;
            inv_preview_y = 150;
        }
        //Slot 16
        if(250 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 350)
        {
            inv_display = 16;
            inv_slot_selected = true;
            inv_preview_x = 940 +70;
            inv_preview_y = 250;
        }
        //Slot 17
        if(350 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 450)
        {
            inv_display = 17;
            inv_slot_selected = true;
            inv_preview_x = 940 +70;
            inv_preview_y = 350;
        }
        //Slot 18
        if(450 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 550)
        {
            inv_display = 18;
            inv_slot_selected = true;
            inv_preview_x = 940 +70;
            inv_preview_y = 450;
        }
        //Slot 19
        if(550 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 650)
        {
            inv_display = 19;
            inv_slot_selected = true;
            inv_preview_x = 940 +70;
            inv_preview_y = 550;
        }
    }
    
    //Column 5
    if(1040 +70 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 640 +70+500)
    {
        //Slot 20
        if(150 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 250)
        {
            inv_display = 20;
            inv_slot_selected = true;
            inv_preview_x = 1040 +70;
            inv_preview_y = 150;
        }
        //Slot 21
        if(250 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 350)
        {
            inv_display = 21;
            inv_slot_selected = true;
            inv_preview_x = 1040 +70;
            inv_preview_y = 250;
        }
        //Slot 22
        if(350 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 450)
        {
            inv_display = 22;
            inv_slot_selected = true;
            inv_preview_x = 1040 +70;
            inv_preview_y = 350;
        }
        //Slot 23
        if(450 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 550)
        {
            inv_display = 23;
            inv_slot_selected = true;
            inv_preview_x = 1040 +70;
            inv_preview_y = 450;
        }
        //Slot 24
        if(550 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 650)
        {
            inv_display = 24;
            inv_slot_selected = true;
            inv_preview_x = 1040 +70;
            inv_preview_y = 550;
        }
    }
    
    if(inv_slot_selected == true)
    {
    if(640 +68-100 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 640 +68)
    {
    if(720 -70-100 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 720 -70)
    {
        global.items[inv_display,0] = "";
        global.items[inv_display,1] = "";
        global.items[inv_display,2] = "";
        global.items[inv_display,3] = "";
        global.items[inv_display,4] = spr_none;
        
        inv_slot_selected = false;
    }
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory user input


if(inv_show == true)
{
    if(8 &lt;= ((mouse_x -view_xview) *2) &amp;&amp; ((mouse_x -view_xview) *2) &lt;= 648)
    {
        //Slot 0
        if(174 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 200)
        {
            inv_display = 0;
            inv_slot_selected = true;
            inv_preview_y = 174;
        }
        //Slot 1
        if(201 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 227)
        {
            inv_display = 1;
            inv_slot_selected = true;
            inv_preview_y = 201;
        }
        //Slot 2
        if(228 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 254)
        {
            inv_display = 2;
            inv_slot_selected = true;
            inv_preview_y = 228;
        }
        //Slot 3
        if(255 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 281)
        {
            inv_display = 3;
            inv_slot_selected = true;
            inv_preview_y = 255;
        }
        //Slot 4
        if(282 &lt;= ((mouse_y -view_yview) *2) &amp;&amp; ((mouse_y -view_yview) *2) &lt;= 308)
        {
            inv_display = 4;
            inv_slot_selected = true;
            inv_preview_y = 282;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug damage popup

if(general_timer = true)
{
    with(instance_create(x, y, obj_damage_popup))
    {
        damage_popup = "Debug!";
        character = other.id;
    }
    
    global.message_big1 = "Everfree Forest";
    global.message_big2 = true;
    global.message_big_x = 640;
    global.message_big_y = 40;
    
    alarm[10] = 30;
    general_timer = false;
}

//Debugging justifies cheating
hp = max_hp
stamina = max_stamina
magic = max_magic
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle respawn

if(respawn = true)
{
    //Variables reset
    
    hp = max_hp;
    magic = max_magic;
    stamina = max_stamina;
    
    //Warp event script
    
    global.dest_x = dest_x;
    global.dest_y = dest_y;

    room_goto(dest_room);

    if(money &gt;= 10)
    {
        money -= 10;
    }

    respawn = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Message database

switch(msg_pony)
{
    case 0:     //Nopony
    show_debug_message("Default pony selected.");
    msg[msg_case, 0] = 5;                    //Length of whole conversation
    msg[msg_case, 1] = spr_inv_test;         //Sprite 1st message
    msg[msg_case, 2] = "No message (1).";    //1st message
    msg[msg_case, 3] = spr_inv_test;         //Sprite 2nd message
    msg[msg_case, 4] = "No message (2).";    //2nd message
    msg[msg_case, 5] = spr_inv_test;         //Sprite 3rd message
    msg[msg_case, 6] = "No message (3).";    //3nd message
    msg[msg_case, 7] = spr_inv_test;         //Sprite 4th message
    msg[msg_case, 8] = "No message (4).";    //4th message
    msg[msg_case, 9] = spr_inv_test;         //Sprite 5th message
    msg[msg_case, 10] = "No message (5).";   //5th message
    break;
    
    case 1:                 //Cobalt Shade
    if(msg_conv == 0)
    {
        if(msg_case == 0)   //Error
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Error message! Something was apparently not set...";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Dumb developers, right?";
            msg[0, 5] = spr_cobalt_right;
            msg[0, 6] = "No, it is just hard to keep an eye on everything that could break, #but yes.";
        }
        if(msg_case == 1)   //Offer
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Hey sexy. If you find my shades of cobalt we can find#somewhere more private for me to give you your reward.";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Alright. Sounds fun, I think...?";
            msg[0, 5] = spr_cobalt_right;
            msg[0, 6] = "You want it. I can see that in your eyes.";
        }
        if(msg_case == 2)   //Offer success
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Great. Thank you for your help!";
        }
        if(msg_case == 3)   //Offer denial
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Aww, alright then. See you next time then!";
        }
        if(msg_case == 4)   //Uncompleted
        {
            msg[0, 0] = 2;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "You haven't got my cobalt shades yet. Bring the#cobalt shades to me and I'll give you your reward.";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Ok. I will get them.";
        }
        if(msg_case == 5)   //Success
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Great, you found my cobalt shades. Now, about your reward...";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "I came solid blocks of cobalt!";
            msg[0, 5] = spr_cobalt_right;
            msg[0, 6] = "It is me, surprise! In which way shall I please you, master?";
        }
        if(msg_case == 6)   //No quests
        {
            msg[0, 0] = 2;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Sorry, I don't have a quest for you at the moment.#Check back at night. Screeeee!";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "I will surely come back later.";
        }
        if(msg_case == 7)   //No space
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_cobalt_right;
            msg[0, 2] = "Sorry, it seems that you already have enough quests.#Come back after you have finished some.";
        }
    }
    break;
    
    case 2:                 //Applejack
    if(msg_conv == 0)
    {
        if(msg_case == 0)   //Error
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Error message! Something was apparently not set...";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Dumb developers, right?";
            msg[0, 5] = spr_applejack_right;
            msg[0, 6] = "No, it is just hard to keep an eye on everything that could break.";
        }
        if(msg_case == 1)   //Offer
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Hey, ya! I need a flower, because... ehm, 'cause why not!#Don't question me, I'm just an NPC!";
        }
        if(msg_case == 2)   //Offer success
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Yeehaw, I knew that I can count on ya!";
        }
        if(msg_case == 3)   //Offer denial
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Darn, I was so sure you could do it..";
        }
        if(msg_case == 4)   //Uncompleted
        {
            msg[0, 0] = 2;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "I still need that flower, which I definitely cannot pick up.#Please, bring it to me.";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Ok. I am on my way.";
        }
        if(msg_case == 5)   //Success
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Yeehaw, you found it! Your reward is...";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Yes? It is?";
            msg[0, 5] = spr_applejack_right;
            msg[0, 6] = "...muh dick - suprise!";
        }
        if(msg_case == 6)   //No quests
        {
            msg[0, 0] = 2;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Sorry partner, but I don't have other things for you to do,#like killing Rarity.";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Alright, goodbye.";
        }
        if(msg_case == 7)   //No space
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_applejack_right;
            msg[0, 2] = "Sorry, it seems that you already have enough quests.#Come back after you have finished some.";
        }
    }
    break;
    
    case 3:  //Trixie Lulamoon
    if(msg_conv == 0)
    {
        if(msg_case == 0)   //Error
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_trixie_right;
            msg[0, 2] = "Error message! Something was apparently not set...";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Dumb developers, right?";
            msg[0, 5] = spr_trixie_right;
            msg[0, 6] = "No, it is just hard to keep an eye on everything that could break.";
        }
        if(msg_case == 6)   //No quests
        {
            msg[0, 0] = 4;
            msg[0, 1] = spr_trixie_right;
            msg[0, 2] = "Hello " + string(global.player_name) + "!#You really want to drink milk from an equine?";
            msg[0, 3] = spr_trixie_right;
            msg[0, 4] = "Are you sure you want my milk?";
            msg[0, 5] = global.character_right;
            msg[0, 6] = "Yes, I am.";
            msg[0, 7] = spr_trixie_right;
            msg[0, 8] = "You are disgusting, " + string(global.player_name) +".";
        }
        if(msg_case == 7)   //No space
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_trixie_right;
            msg[0, 2] = "Sorry, it seems that you already have enough quests.#Come back after you have finished some.";
        }
    }
    break;
    
    case 4:  //Derpy
    if(msg_conv == 0)
    {
        if(msg_case == 0)   //Error
        {
            msg[0, 0] = 3;
            msg[0, 1] = spr_derpy_right;
            msg[0, 2] = "Error message! Something was apparently not set...";
            msg[0, 3] = global.character_right;
            msg[0, 4] = "Dumb developers, right?";
            msg[0, 5] = spr_derpy_right;
            msg[0, 6] = "No, it is just hard to keep an eye on everything that could break.";
        }
        if(msg_case == 6)   //No quests
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_derpy_right;
            msg[0, 2] = "I am mentally retarded.";
        }
        if(msg_case == 7)   //No space
        {
            msg[0, 0] = 1;
            msg[0, 1] = spr_derpy_right;
            msg[0, 2] = "Sorry, it seems that you already have enough quests.#Come back after you have finished some.";
        }
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window messages

if(text_loop &gt; msg[0, 0])   //If last message is reached
{
    with(obj_window_base)   //Destroy window after last message
    {
        event_user(1);
    }
    
    text_loop = 0;
    show_debug_message("Delete window.");
}
else
{
    switch(text_loop)   //Switch through messages
    {
        case 1:  //Message 1
        with(instance_create(200, 520, obj_window_base))  //Create 1st message window
        {
            image_xscale = 12;
            image_yscale = 3;
            window_speaker  = other.msg[0, 1];
            window_message1 = other.msg[0, 2];
            
            event_user(0);
            show_debug_message("Setup for window done.");
        }
        
        show_debug_message("Message 1")
        break;
        
        case 2:  //Message 2
        with(obj_window_base)
        {
            window_speaker  = other.msg[0, 3];
            window_message1 = other.msg[0, 4];
            event_user(0);
        }
        
        show_debug_message("Message 2");
        break;
        
        case 3:  //Message 3
        with(obj_window_base)
        {
            window_speaker  = other.msg[0, 5];
            window_message1 = other.msg[0, 6];
            event_user(0);
        }
        
        show_debug_message("Message 3");
        break;
        
        case 4:  //Message 4
        with(obj_window_base)
        {
            window_speaker  = other.msg[0, 7];
            window_message1 = other.msg[0, 8];
            event_user(0);
        }
        
        show_debug_message("Message 4");
        break;
        
        case 5:  //Message 5
        with(obj_window_base)
        {
            window_speaker  = other.msg[0, 9];
            window_message1 = other.msg[0, 10];
            event_user(0);
        }
        
        show_debug_message("Message 5");
        break; 
    }
}

if(text_loop &gt; (msg[0, 0] -1))  //If last message is shown -&gt; lock
{
if(msg_case = 1)                //-&gt; Only for offer cases
{
if(q_success = true)            //-&gt; Only if quest space is there
{
    with(instance_create(1000, 530, obj_button_yesno))   //Create "Yes" button
    {
        name = "Yes";
    }
    with(instance_create(1000, 630, obj_button_yesno))   //Create "No" button
    {
        name = "No";
    }

    with(obj_window_base)       //Lock window (decision has to be done)
    {
        locked = true;
    }
    
    q_success = false;
    show_debug_message("Window locked now.");
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory + quests

if(inv_quest == 0)
{
    var inv_assigned = false;
    
    //Inventory
    var p_runs = 0;
    while(inv_assigned == false &amp;&amp; p_runs &lt; 5)       //p_runs &lt; NUMBER -&gt; space in inv
    {
        if(global.items[p_runs,0] == "")
        {
            global.items[p_runs,0] = global.pickup1; //Name
            global.items[p_runs,1] = global.pickup2; //Description
            global.items[p_runs,2] = global.pickup3; //Type (Weapon, Armour, Status, Misc)
            global.items[p_runs,3] = global.pickup4; //Price
            global.items[p_runs,4] = global.pickup5; //Sprite
            
            with(obj_items)                     //Gives item success answer
            {
                p_target = global.pickup1;
                p_success = 1;
                event_user(0);
            }
            
            show_debug_message("Item pickup assignment " + string(p_runs) + ".");
            inv_assigned = true;                //End loop
        }
        else                                    //Next inv slot check
        {
        p_runs += 1;
        }
    }
    
    if(p_runs == 5) //To be changed into 25 again
    {
        with(obj_items)                         //Gives item failure answer
        {
            p_target = global.pickup1;
            p_success = 2;
            event_user(0);
        }
        
        p_runs = 0;
    }
}
else    //Quests
{
    var quest_assigned = false;
    
    q_decis_runs = 0;
    while(quest_assigned == false &amp;&amp; q_decis_runs &lt; 1)
    {
        if(global.quests[q_decis_runs,0] == "") //Enough space for quest
        {
            q_success = true;
            quest_assigned = true;  //End loop
        }
        else                        //Next quest slot check
        {
            q_decis_runs += 1;
        }
    }
    
    if(q_decis_runs == 1)           //1 = Maximum amount
    {
        with(obj_NPC_base1)
        {
            q_target = other.quest1;//Make sure correct NPC launches code
            event_user(13);         //No space event
        }
        
        show_debug_message("Quest assignment no space.");
        q_decis_runs = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interface

//Health + Stamina bar
draw_healthbar(20, 20, 200, 30, hp/max_hp *100, c_black, c_red, c_red, 0, true, true);
draw_healthbar(20, 40, 200, 50, stamina/max_stamina *100, c_black, c_blue, c_blue, 0, true, true);

//Messages
draw_set_halign(0);
draw_set_alpha(alpha1);
if(message_1a != "")
{
    draw_text(20, 500, message_1a);
}

draw_set_alpha(alpha2);
if(message_2a != "")
{
    draw_text(20, 520, message_2a);
}

draw_set_alpha(alpha3);
if(message_3a != "")
{
    draw_text(20, 540, message_3a);
}

//Big Messages
draw_set_alpha(alpha_big1);
draw_set_halign(fa_center);
draw_set_font(font_popup);
if(message_big_1a != "")
{
    draw_text(global.message_big_x, global.message_big_y, message_big_1a);
}

draw_set_font(font_eq);
draw_set_alpha(1);


//Magic bar
if(global.character_race == "unicorn")
{
    draw_healthbar(20, 60, 200, 70, magic/max_magic *100, c_black, c_purple, c_purple, 0, true, true);
}
else
{
    draw_set_valign(fa_top);
    draw_set_halign(0);
    if(global.character_race == "earthpony")
    {
        draw_text_ext(20, 100, "You are an " + string(global.character_race) + ".#You cannot use spells!", 20, -1);
    }
    else
    {
        draw_text_ext(20, 100, "You are a " + string(global.character_race) + ".#You cannot use spells!", 20, -1);
    }
}

//Health bar text
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text((200-20)/2 +20, 20, string(hp) + "/" + string(max_hp));

//Attack type
draw_set_halign(0);
draw_text(20, 80, "attack_type: " + string(attack_type));

//Quest screen
if(quest_show == true)
{
if(inv_show == false)
{
    draw_set_halign(fa_center);
    draw_set_alpha(0.3);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, 1280, 720, false);
    
    draw_set_alpha(0.5);
    draw_set_colour(c_white);
    draw_rectangle(640 -150, 200 -30, 640 +150, 200 +200 +30, false);
    
    draw_set_alpha(1);
    draw_set_colour(c_black);
    draw_text(640, 200, "Running Quests");
    
    for(i = 0; i &lt;= (5 -1); i += 1)    //5 = space for quests
    {
        draw_text(640, 230 + 20 *i, global.quests[i,0]);
    }
    
    draw_set_colour(c_white);
    draw_set_halign(fa_right);
    draw_text(1280 - 20, 20, "Limit of quests/same time: 5 (Currently just 1 due to testing).");
    
    draw_set_halign(fa_left);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory [OUTDATED]
/*
if(inv_show == true)
{
if(quest_show == false)
{
    //Blacken screen
    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, 1280, 720, false);
    
    //Grey box (background inventory)
    draw_set_alpha(1);
    draw_set_colour(c_dkgray);
    draw_rectangle(640 +68, 720 -72-500, 1280 -68, 720 -68, false);
    
    //Delete box
    draw_rectangle(640 +68-100, 720 -70-100, 640 +68, 720 -70, false);
    
    //Text
    draw_set_colour(c_white);
    draw_text(450, 150, "Inventory");
    draw_text(640+68-50, 720 -70-50, "DEL");
    
    if(inv_slot_selected == true)
    {
        draw_set_colour(c_navy);
        draw_rectangle(inv_preview_x, inv_preview_y,inv_preview_x +100, inv_preview_y +100, false);
        draw_set_colour(c_white);
        
        if(global.items[inv_display,0] == "" &amp;&amp; global.items[inv_display,4] == spr_none)
        {
            draw_text(450, 250, "No item");
        }
        else
        {
            draw_text(450, 250, string(global.items[inv_display,0]));
            draw_text(450, 270, string(global.items[inv_display,1]));
            
            if(global.items[inv_display,2] == 0)
            {
                draw_text(450, 290, "Type: Weapon");
            }
            else
            {
                if(global.items[inv_display,2] == 1)
                {
                    draw_text(450, 290, "Type: Armour");
                }
                else
                {
                    if(global.items[inv_display,2] == 2)
                    {
                        draw_text(450, 290, "Type: Potion");
                    }
                    else
                    {
                        draw_text(450, 290, "Type: Other");
                    }
                }
            }
            
            draw_text(450, 310, "Price: " + string(global.items[inv_display,3]) + " Bits");
        }
    }
    else
    {
        draw_text(450, 250, "No item");
    }
    
    //Item slots frame
    draw_set_alpha(0.5);
    
    for(i = 0; i &lt;= 20; i += 5)
    {
        draw_rectangle(640 +70+2 +i/5*100, 720 -70+2-500, 640 +70+100-2 +i/5*100, 720 -70-400-2, false);
    }
    for(i = 0; i &lt;= 20; i += 5)
    {
        draw_rectangle(640 +70+2 +i/5*100, 720 -70+2-400, 640 +70+100-2 +i/5*100, 720 -70-300-2, false);
    }
    for(i = 0; i &lt;= 20; i += 5)
    {
        draw_rectangle(640 +70+2 +i/5*100, 720 -70+2-300, 640 +70+100-2 +i/5*100, 720 -70-200-2, false);
    }
    for(i = 0; i &lt;= 20; i += 5)
    {
        draw_rectangle(640 +70+2 +i/5*100, 720 -70+2-200, 640 +70+100-2 +i/5*100, 720 -70-100-2, false);
    }
    for(i = 0; i &lt;= 20; i += 5)
    {
        draw_rectangle(640 +70+2 +i/5*100, 720 -70+2-100, 640 +70+100-2 +i/5*100, 720 -70-2, false);
    }
    
    //Item sprites
    //Collumn 1
    draw_set_alpha(1);
    
    for(i = 0; i &lt;= (5-1); i += 1)
    {
        draw_sprite_stretched(global.items[i,4], 0, 640 +70+4, 720 -70-500+4 +i*100, 92, 92);
    }
    //Collumn 2
    for(i = 5; i &lt;= (10-1); i += 1)
    {
        draw_sprite_stretched(global.items[i,4], 0, 640 +70+100+4, 720 -70-500+4 +(i-5)*100, 92, 92);
    }
    //Collumn 3
    for(i = 10; i &lt;= (15-1); i += 1)
    {
        draw_sprite_stretched(global.items[i,4], 0, 640 +70+200+4, 720 -70-500+4 +(i-10)*100, 92, 92);
    }
    //Collumn 4
    for(i = 15; i &lt;= (20-1); i += 1)
    {
        draw_sprite_stretched(global.items[i,4], 0, 640 +70+300+4, 720 -70-500+4 +(i-15)*100, 92, 92);
    }
    //Collumn 5
    for(i = 20; i &lt;= (25-1); i += 1)
    {
        draw_sprite_stretched(global.items[i,4], 0, 640 +70+400+4, 720 -70-500+4 +(i-20)*100, 92, 92);
    }
    
    draw_set_colour(c_white);
    draw_set_halign(fa_right);
    draw_text(1280 - 20, 20, "Available Slots: 25.");
    draw_text(1280 - 20, 40, "Money: " + string(money) + ".");
    
    draw_set_halign(fa_left);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory 2.0

if(inv_show == true)
{
if(quest_show == false)
{
    //Blacken screen
    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, 1280, 720, false);
    
    //Black outlines
    draw_set_alpha(1);
    draw_set_colour(c_black);
    draw_rectangle(7, 7, 649, 720 -7, false);           //Inventory box
    draw_rectangle(658, 7, 1280 -7, 356, false);        //Description box
    draw_rectangle(658, 365, 1280 -7, 720 -7, false);   //Comparison box
    
    //Interface pages
    draw_set_colour(make_color_rgb(214, 182, 135));
    draw_rectangle(8, 8, 648, 720 -8, false);           //Inventory box
    draw_rectangle(659, 8, 1280 -8, 355, false);        //Description box
    draw_rectangle(659, 366, 1280 -8, 720 -8, false);   //Comparison box
    
    //Above inventory
    draw_set_colour(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(font_popup);
    draw_text(75, 40, "Weapons");
    
    //draw_set_halign(fa_center);
    draw_set_font(font_eq);
    draw_text(580, 150, "Price");
    
    //Selection marker
    if(inv_slot_selected == true)
    {
        draw_set_alpha(0.5);
        draw_set_colour(c_blue);
        draw_rectangle(8, inv_preview_y, 648, inv_preview_y + 25, false);   //Selection marker
        
        //Description
        draw_set_alpha(1);
        draw_set_font(font_popup);
        draw_set_colour(c_black);
        draw_text(680, 30, string(global.items[inv_display,0]));            //Name of selected item
        draw_set_font(font_medium);
        draw_text(980, 80, string(global.items[inv_display,1]));            //Description of selected item
        
        var size_x = sprite_get_width(global.items[inv_display,1]);         //Get sprite size
        draw_sprite_ext(global.items[inv_display,4], 0, 800, 185, 250 /size_x , 250 /size_x, 0, -1, 1); //Draw sprite in 250x250
    }
    
    
    //Inventory core
    draw_set_font(font_eq);
    draw_set_halign(fa_left);
    
    //Names
    draw_text(50, 175, string(global.items[0,0]) + "#" + string(global.items[1,0]) + "#" + string(global.items[2,0]) + "#" + string(global.items[3,0]) + "#" + string(global.items[4,0]));
    //Price
    draw_text(580, 175, string(global.items[0,3]) + "#" + string(global.items[1,3]) + "#" + string(global.items[2,3]) + "#" + string(global.items[3,3]) + "#" + string(global.items[4,3]));
    
    
    //External information (to be deleted later)
    draw_set_colour(c_white);
    draw_set_halign(fa_right);
    draw_text(1280 - 20, 20, "Available Slots: 25. | Mouse x: " + string((mouse_x -view_xview) *2));
    draw_text(1280 - 20, 40, "Money: " + string(money) + ". | Mouse y: " + string((mouse_y -view_yview) *2));
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

draw_set_colour(c_white);
physics_draw_debug();
draw_self();

draw_circle(x, y, 50, true);

//Line from player to cursor
draw_line(phy_position_x, phy_position_y, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>100</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10000</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,25</point>
    <point>19,25</point>
  </PhysicsShapePoints>
</object>
