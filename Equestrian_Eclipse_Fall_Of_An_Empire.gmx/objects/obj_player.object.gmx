<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trixie_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

phy_fixed_rotation = true;

sprite_index = global.character_right;

//Variables
action = false;
attack_type = 1;
notme = true;

//Status
max_hp = 10;
hp = max_hp;

max_stamina = 30;
stamina = max_stamina;

max_magic = 30;
magic = max_magic;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn

/*dest_x = 272;
dest_y = 112;

respawn_room = rm_test;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth

depth = (phy_position_y - 15) * -1

phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Input

if(keyboard_check(ord("A"))){
    sprite_index = global.character_left;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0){
        phy_position_x -=3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_x -=1.5;
    }
}


if(keyboard_check(ord("D"))){
    sprite_index = global.character_right;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0){
        phy_position_x +=3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_x +=1.5;
    }
}


if(keyboard_check(ord("W"))){
    sprite_index = global.character_up;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0){
        phy_position_y -=3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_y -=1.5;
    }
}

status_running = false;

if(keyboard_check(ord("S")))
{
    sprite_index = global.character_down;

    if(keyboard_check(vk_shift) &amp;&amp; stamina &gt; 0){
        phy_position_y +=3;
        stamina -= 2/60;
        status_running = true;
    }
    else
    {
        phy_position_y +=1.5;
    }
}


//Interaction
if(keyboard_check(ord("E")))
{
    action = true;
}
else
{
    action = false;
}

//Stamina regeneration
if(status_running == false &amp;&amp; stamina &lt; max_stamina)
{
    stamina += 1/60;
}

//Magic regeneration
if(magic &lt; max_magic)
{
    magic += 1/60;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Miscellaneous

/*
if(hp &lt; 0)
    global.dest_x = dest_x;
    global.dest_y = dest_y;

    room_goto(respawn_room);
*/

//Deactivation of objects outside of the view
//instance_deactivate_region(view_xview[0], view_yview[0], view_wview[0], view_hview[0], false, true);

instance_deactivate_region(0, 0, room_width, room_height, false, true);
//instance_activate_region(view_xview[1], view_yview[1], view_wview[1], view_hview[1], true);
instance_activate_region(view_xview[0] -150, view_yview[0] -150, view_wview[0] +150, view_hview[0] +150, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display
//Display interactables

obj_closest = instance_nearest(x,y,obj_interactable);
dist_interact = point_distance(phy_position_x, phy_position_y, obj_closest.x, obj_closest.y);

if(obj_closest.active == true)
{
    if(dist_interact &lt; 50)
    {
        obj_bubble.active = true;
        obj_bubble.x = obj_closest.x;
        obj_bubble.y = obj_closest.y - 20;
    }
    else
    {
        obj_bubble.active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_NPC_base1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_obstacles">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch Attack Type

if (attack_type == 4)
{
    attack_type = 1;
}
else
{
    attack_type +=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Magic

dir = point_direction(phy_position_x, phy_position_y, mouse_x, mouse_y);
spawn_x = lengthdir_x(25, dir);
spawn_y = lengthdir_y(25, dir);

switch(attack_type)
{
    case 1:
    if(magic &gt;= 5 &amp;&amp; global.character_race == "unicorn")
    {
        attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_magic);
        magic -= 5;
        break;
    }

    case 2:
    if(magic &gt;= 5 &amp;&amp; global.character_race == "unicorn")
    {
        attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_fire);
        magic -= 5;
        break;
    }
    
    case 3:
    if(magic &gt;= 5 &amp;&amp; global.character_race == "unicorn")
    {
        attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_ice);
        magic -= 5;
        break;
    }
    
    case 4:
    if(magic &gt;= 5 &amp;&amp; global.character_race == "unicorn")
    {
        attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_lightning);
        magic -= 5;
        break;
    }
    /*
    case 5:
    if(magic &gt;= 3 &amp;&amp; global.character_race == "unicorn")
    {
        attack = instance_create(phy_position_x + spawn_x, phy_position_y + spawn_y, obj_attack_[something]);
        magic -= 5;
        break;
    }
    */
}

if(global.character_race == "unicorn")
{
    with(attack){

    force_x = lengthdir_x(force, other.dir);
    force_y = lengthdir_y(force, other.dir);

    phy_rotation = -other.dir
    physics_apply_impulse(x, y, force_x, force_y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interface

//Health bar
draw_healthbar(20, 20, 200, 30, hp/max_hp *100, c_black, c_red, c_red, 0, true, true);

//Stamina bar
draw_healthbar(20, 40, 200, 50, stamina/max_stamina *100, c_black, c_blue, c_blue, 0, true, true);
//draw_text(150, 50, "#Stamina: " + string(stamina) + "/" + string(max_stamina));

if(global.character_race == "unicorn")
{
    draw_healthbar(20, 60, 200, 70, magic/max_magic *100, c_black, c_purple, c_purple, 0, true, true);
    //draw_text(150, 50, "##Magic: " + string(magic) + "/" + string(max_magic));
}

//Health bar text
draw_set_halign(fa_center);
draw_text((200-20)/2 +20, 20, string(hp) + "/" + string(max_hp));

//Attack type (Debug)

draw_set_halign(0);
draw_text(20, 80, "attack_type: " + string(attack_type));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

physics_draw_debug()
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>100</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10000</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,25</point>
    <point>19,25</point>
  </PhysicsShapePoints>
</object>
