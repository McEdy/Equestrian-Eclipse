<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

status_effect = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///After time -&gt; destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage and status effects

hit_angle = point_direction(x, y, other.phy_position_x, other.phy_position_y);
hit_dx = lengthdir_x(10, hit_angle);
hit_dy = -lengthdir_y(10, hit_angle);

with(instance_create(x, y, obj_damage_popup))
{
    damage_popup = other.damage;
    character = obj_player.id;
}

with(other)
{
    hp -= other.damage;
    physics_apply_impulse(x, y, other.hit_dx, other.hit_dy);
}

if(obj_player.hp &lt;= 0) //Handle respawn
{
    show_debug_message("You died in Equestrian Eclipse. You're bad at this game and you should feel bad!");
    show_message("You died. Bad player, I expected more from you! (You can even cheat, dumbass...)");
    
    with(obj_player)
    {
        event_user(2);
    }
}
else                    //Status effects
{
    if(status_effect == "")                                         //No status effect
    {
        show_debug_message("No status effect.");
    }
    else
    {
        with(obj_player)
        {
            if(status_effect1 == "")                                //Create new effect 1
            {
                alarm[4] = 60;
                status_effect1 = other.status_effect;
            }
            else
            {
                if(status_effect1 == other.status_effect)           //Overwrite same effect 1
                {
                    alarm[4] = 60;
                    status_effect1 = other.status_effect;
                    effect1_counter = 0;
                }
                else                                                //Switch to effect 2
                {
                    if(status_effect2 == "")                        //Create new effect 2
                    {
                        alarm[5] = 60;
                        status_effect2 = other.status_effect;
                    }
                    else
                    {
                        if(status_effect2 == other.status_effect)   //Overwrite same effect 2
                        {
                            alarm[5] = 60;
                            status_effect2 = other.status_effect;
                        }                                           //If no space -&gt; no effect
                    }
                }
            }
        }
    }
    
    switch(status_effect)
    {
        case "burning":
        show_debug_message("Burning activated.");
        break;
        
        case "slowness":
        show_debug_message("Slowness activated.");
        break;
        
        case "exhausted":
        show_debug_message("Exhausted activated.");
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
